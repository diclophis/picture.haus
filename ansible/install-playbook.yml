---
- hosts: picture-haus
  vars_files:
    - vars/picture-haus.yml
  tasks:

# baseline

    - name: ensure aptitude is installed
      sudo: true
      apt: pkg=aptitude state=present

    - name: install sources.list
      sudo: true
      copy: src=files/trusty-sources.list dest=/etc/apt/sources.list

    - name: update and safe upgrade apt-get packages
      sudo: true
      apt: update_cache=true cache_valid_time=60 upgrade=safe

    - name: install main system packages (1/2)
      apt: pkg={{ item }} state=present
      sudo: true
      with_items:
        - unattended-upgrades
        - apt-transport-https
        - build-essential
        - git
        - screen
        - vim
        - psmisc
        - curl
        - zip
        - rsync
        - wget
        - htop
        - tree
        - mailutils
        - console-setup
        - kbd
        - xkb-data
        - man-db
        - libc-bin
        - dnsutils
        - pv
        - libssl1.0.0
        - openssl
        - libssl-dev
        - update-manager-core
        - update-notifier-common
        - libpcap0.8
        - tcpdump
        - aptitude
        - python-setuptools
        - libc6-dev
        - g++
        - zlib1g-dev
        - python-pkg-resources
        - iftop
        - nethogs

# flynn

    - sudo: true
      apt: pkg=ufw state=absent

    - name: Install Flynn Client
      sudo: true
      shell: "test -e /usr/local/bin/flynn || (L=/usr/local/bin/flynn && curl -sSL -A \"`uname -sp`\" https://dl.flynn.io/cli | zcat >$L && chmod +x $L)"

    - name: Install Flynn Server
      sudo: true
      shell: "test -e /tmp/install-flynn || curl -fsSL -o /tmp/install-flynn https://dl.flynn.io/install-flynn"

    - name: ensure the dependencies for flynn get held at particular versions
      sudo: true
      shell: (apt-mark showhold | grep {{ item }}) || apt-mark hold {{ item }}
      with_items:
        - libvirt-bin
        - libvirt0
        - libxen-4.4
        - libxenstore3.0
        - librados2

    - sudo: true
      shell: stop flynn-host || true
      when: '{{ lookup("env", "BOOTSTRAP_FLYNN")|bool }}'

    - sudo: true
      shell: "(bash /tmp/install-flynn --clean --yes) || true"
      when: '{{ lookup("env", "BOOTSTRAP_FLYNN")|bool }}'

    - sudo: true
      shell: "(echo > /var/log/upstart/flynn-host.log)"
      when: '{{ lookup("env", "BOOTSTRAP_FLYNN")|bool }}'

    - sudo: true
      shell: bash /tmp/install-flynn
      when: '{{ lookup("env", "BOOTSTRAP_FLYNN")|bool }}'

    - name: detect flynn-host status
      sudo: true
      shell: status flynn-host
      register: flynn_status_result

    - debug: msg="{{ flynn_status_result.stdout }}"
    - debug: msg="{{ flynn_status_result.stdout.find('stop/waiting') }}"

    - name: create flynn-host discovery token
      sudo: true
      shell: flynn-host init --init-discovery
      when: flynn_status_result.stdout.find("stop/waiting") != -1
      register: flynn_host_discovery_token_result

    - when: flynn_status_result.stdout.find("stop/waiting") != -1
      set_fact:
        flynn_host_discovery_token: "{{ flynn_host_discovery_token_result.stdout }}"

    - debug: msg="{{ flynn_host_discovery_token }}"
      when: flynn_status_result.stdout.find("stop/waiting") != -1

    - name: start flynn-host
      sudo: true
      service: name=flynn-host state=started enabled=true
      when: flynn_status_result.stdout.find("stop/waiting") != -1

    - name: detect flynn-host status 2
      sudo: true
      shell: status flynn-host
      register: flynn_status_result_alt

    - debug: msg="{{ flynn_status_result_alt.stdout }}"
    - debug: msg="{{ flynn_status_result_alt.stdout.find('stop/waiting') }}"

    - name: start flynn-host
      sudo: true
      service: name=flynn-host state=stopped enabled=true
      when: '{{ lookup("env", "BOOTSTRAP_FLYNN")|bool }}'

    - name: detect flynn-host status
      sudo: true
      shell: status flynn-host
      register: flynn_status_result

    - debug: msg="{{ flynn_status_result.stdout }}"
    - debug: msg="{{ flynn_status_result.stdout.find('stop/waiting') }}"

    - name: start flynn-host discovery with token
      sudo: true
      shell: flynn-host init
      when: flynn_status_result.stdout.find("stop/waiting") != -1 or lookup("env", "BOOTSTRAP_FLYNN")|bool

    - name: start flynn-host
      sudo: true
      service: name=flynn-host state=started enabled=true
      when: flynn_status_result.stdout.find("stop/waiting") != -1 or lookup("env", "BOOTSTRAP_FLYNN")|bool

    - name: detect flynn-host status 2
      sudo: true
      shell: status flynn-host
      register: flynn_status_result_alt

    - debug: msg="{{ flynn_status_result_alt.stdout }}"
    - debug: msg="{{ flynn_status_result_alt.stdout.find('stop/waiting') }}"

    - name: detect flynn-host status
      sudo: true
      shell: status flynn-host
      register: flynn_status_result

    - debug: msg="{{ flynn_status_result.stdout }}"
    - debug: msg="{{ flynn_status_result.stdout.find('flynn-host stop/waiting') }}"

    - name: bootstrap flynn
      register: bootstrap_flynn_result
      shell: CLUSTER_DOMAIN="{{ picture_haus_naked_domain }}" flynn-host bootstrap
      when: '{{ lookup("env", "BOOTSTRAP_FLYNN")|bool }}'

    - debug: msg="{{ bootstrap_flynn_result }}"

    - name: detect flynn-host status 2
      sudo: true
      shell: status flynn-host
      register: flynn_status_result_alt

    - debug: msg="{{ flynn_status_result_alt.stdout }}"
    - debug: msg="{{ flynn_status_result_alt.stdout.find('stop/waiting') }}"

# elasticsearch

    - name: ensure elasticsearch PGP keys are installed
      sudo: true
      apt_key: state=present url="https://packages.elastic.co/GPG-KEY-elasticsearch"

    - name: ensure the elasticsearch apt repository is added
      sudo: true
      apt_repository: state=present repo='deb http://packages.elastic.co/elasticsearch/2.x/debian stable main'

    - name: ensure the elasticsearch server is installed
      sudo: true
      apt: pkg={{ item }} state=present
      with_items:
        - elasticsearch=2.*

    - name: ensure elasticsearch-head plugin is installed
      sudo: true
      shell: creates=/usr/share/elasticsearch/plugins/head /usr/share/elasticsearch/bin/plugin install mobz/elasticsearch-head

    #- name: ensure elasticsearch-image plugin is installed
    #  sudo: true
    #  shell: creates=/usr/share/elasticsearch/plugins/elasticsearch-image /usr/share/elasticsearch/bin/plugin install kiwionly/elasticsearch-image

#    #- name: install basic elasticsearch.yml
#    #  sudo: true
#    #  template: src=elasticsearch.yml.j2 dest=/etc/elasticsearch/elasticsearch.yml owner=root group=root mode=0644 backup=true
#    #  notify:
#    #    - restart elasticsearch
#
#    #- name: install basic elasticsearch.init-defaults
#    #  sudo: true
#    #  template: src=elasticsearch.init-defaults.j2 dest=/etc/default/elasticsearch owner=root group=root mode=0644 backup=true
#    #  notify:
#    #    - restart elasticsearch
#
#    #- name: ensure perms for elasticsearch
#    #  sudo: true
#    #  shell: chown -R elasticsearch-shared:elasticsearch-shared /var/lib/elasticsearch /var/run/elasticsearch /var/log/elasticsearch /etc/elasticsearch

    - name: enable elasticsearch
      sudo: true
      service: name=elasticsearch state=started enabled=true

    #- shell: "true"
    #  notify:
    #    - restart elasticsearch


#dpkg -l | grep jdk
#sudo apt-get remove default-jre-headless openjdk-7-jre openjdk-7-jre-headless openjdk-7-jdk openjdk-7-jre
#dpkg -l | grep jdk
#apt-get remove gradle
#sudo apt-get remove gradle
#sudo apt-get autoremove
#sudo apt-add-repository ppa:webupd8team/java
#sudo apt-get update
#sudo apt-get install oracle-java8-installer
#sudo add-apt-repository ppa:cwchien/gradle
#sudo apt-get update
#sudo apt-get install gradle
#gradle plugin
#sudo /usr/share/elasticsearch/bin/plugin install file:///home/ubuntu/elasticsearch-image-master/build/distributions/elasticsearch-image-2.2.0.zip
#cp /usr/share/elasticsearch/plugins/elasticsearch-image/metadata-extractor-2.8.1.jar /usr/share/elasticsearch/lib/
#/etc/init.d/elasticsearch stop
#/etc/init.d/elasticsearch start
#tail -f /var/log/elasticsearch/bardin-haus.log 
#tail -n 1000 -f /var/log/elasticsearch/bardin-haus.log 
#rm /usr/share/elasticsearch/plugins/elasticsearch-image/lire.jar 
#rm /usr/share/elasticsearch/plugins/elasticsearch-image/metadata-extractor-2.8.1.jar 
#/etc/init.d/elasticsearch start
#tail -n 1000 -f /var/log/elasticsearch/bardin-haus.log 
#ls
#cp lib/lire.jar /usr/share/elasticsearch/lib/
#/etc/init.d/elasticsearch start
#tail -n 1000 -f /var/log/elasticsearch/bardin-haus.log 
#wget http://central.maven.org/maven2/com/adobe/xmp/xmpcore/5.1.2/xmpcore-5.1.2.jar
