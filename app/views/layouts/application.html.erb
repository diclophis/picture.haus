<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"/>
    <title>Centerology</title>
    <%= stylesheet_link_tag "application", media: "all", "data-turbolinks-track" => true %>
    <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
    <%= csrf_meta_tags %>
    <style>
      /*
      html, body {
        margin: 0;
        padding: 0;
        background-color: rgba(0, 0, 0, 1.0);
        color: #ffffff;
      }
      ul {
        margin: 0;
        padding: 0;
        width: 100%;
        list-style: none;
      }
      */
      div {
        margin: 0;
        padding: 0;
        max-width: 2048px;
        background-color: rgba(0, 0, 0, 0.0);
      }

      /*
      p {
        margin: 1em;
        padding: 1em;
        background-color: rgba(0, 0, 0, 0.5);
      }
      h1 {
        font-family: sans-serif;
        font-size: 300%;
        text-shadow: 0px 0px 10px rgb(255, 255, 255), 0px 0px 20px rgb(255, 255, 255), 0px 0px 30px rgb(255, 255, 255), 0px 0px 40px rgb(255, 0, 222), 0px 0px 70px rgb(255, 0, 222), 0px 0px 80px rgb(255, 0, 222), 0px 0px 100px rgb(255, 0, 222), 0px 0px 150px rgb(255, 0, 222);
        text-align: center;
      }
      #risingcode-content {
        transform: translate3d(0px, 0px, 1px);
        -webkit-transform: translate3d(0px, 0px, 1px);
      }
      */
      #risingcode-grid {
        overflow: hidden;
        position: fixed;
        top: 0;
        left: 0;
        z-index: -1;
      }
      #risingcode-grid canvas {
        position: absolute;
        top: 0;
        left: 0;
        background-color: rgba(0, 0, 0, 0);
        transition: transform 0.66s;
        transform: rotateX(0deg) translateY(0px) scale3d(1.0, 1.0, 1.0);
        backface-visibility: hidden;
        -webkit-transition: -webkit-transform 0.66s;
        -webkit-transform: rotateX(0deg) translateY(0px) scale3d(1.0, 1.0, 1.0);
        -webkit-backface-visibility: hidden;
      }
      canvas, svg {
        image-rendering: optimizeSpeed;
        image-rendering: -moz-crisp-edges;
        image-rendering: -webkit-optimize-contrast;
        image-rendering: optimize-contrast;
        -ms-interpolation-mode: nearest-neighbor;
        -webkit-touch-callout: none;
        -webkit-text-size-adjust: none;
        -webkit-tap-highlight-color: rgba(0,0,0,0); 
        -webkit-user-select: none;
        -webkit-tap-highlight-color: rgba(0,0,0,0); 
      }
    </style>
    <script id="example" type="x-shader/x-fragment">
    #ifdef GL_ES
    precision highp float;
    #endif

    uniform float iGlobalTime;
    uniform vec2 iResolution;
    vec2 iMouse = vec2(10, sin(iGlobalTime * 0.1));

// Created by inigo quilez - iq/2013
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

#define FULL_PROCEDURAL

#ifdef FULL_PROCEDURAL

// hash based 3d value noise
float hash( float n )
{
    return fract(sin(n)*43758.5453);
}
float noise( in vec3 x )
{
    vec3 p = floor(x);
    vec3 f = fract(x);

    f = f*f*(3.0-2.0*f);
    float n = p.x + p.y*57.0 + 113.0*p.z;
    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
                   mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),
               mix(mix( hash(n+113.0), hash(n+114.0),f.x),
                   mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
}
#else

// LUT based 3d value noise
float noise( in vec3 x )
{
    vec3 p = floor(x);
    vec3 f = fract(x);
  f = f*f*(3.0-2.0*f);
  
  vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;
  vec2 rg = texture2D( iChannel0, (uv+ 0.5)/256.0, -100.0 ).yx;
  return mix( rg.x, rg.y, f.z );
}
#endif

vec4 map( in vec3 p )
{
  float d = 0.2 - p.y;

  vec3 q = p - vec3(1.0,0.1,0.0)*iGlobalTime * 0.1;
  float f;
    f  = 0.5000*noise( q ); q = q*2.02;
    f += 0.2500*noise( q ); q = q*2.03;
    f += 0.1250*noise( q ); q = q*2.01;
    f += 0.0625*noise( q );

  d += 3.0 * f;

  d = clamp( d, 0.0, 1.0 );
  
  vec4 res = vec4( d );

  res.xyz = mix( 1.15*vec3(1.0,0.95,0.8), vec3(0.7,0.7,0.7), res.x );
  
  return res;
}


vec3 sundir = vec3(-1.0,0.0,0.0);


vec4 raymarch( in vec3 ro, in vec3 rd )
{
  vec4 sum = vec4(0, 0, 0, 0);

  float t = 0.0;
  for(int i=0; i<44; i++)
  {
    vec3 pos = ro + t*rd;
    vec4 col = map( pos );
    
    #if 1
    float dif =  clamp((col.w - map(pos+0.3*sundir).w)/0.6, 0.0, 1.0 );

        vec3 brdf = vec3(0.65,0.68,0.7)*1.35 + 0.45*vec3(0.7, 0.5, 0.3)*dif;
    col.xyz *= brdf;
    #endif
    
    col.a *= 0.35;
    col.rgb *= col.a;

    sum = sum + col*(1.0 - sum.a);  

    //if (sum.a > 0.99) break;
        #if 0
    t += 0.1;
    #else
    t += max(0.1,0.05*t);
    #endif
  }

  sum.xyz /= (0.001+sum.w);

  return clamp( sum, 0.0, 1.0 );
}

void main(void)
{
    vec2 q = gl_FragCoord.xy / iResolution.xy;
    vec2 p = -1.0 + 2.0*q;
    p.x *= iResolution.x/ iResolution.y;
    vec2 mo = -1.0 + 2.0*iMouse.xy / iResolution.xy;
    
    // camera
    vec3 ro = 4.0*normalize(vec3(cos(2.75-3.0*mo.x), 0.7+(mo.y+1.0), sin(2.75-3.0*mo.x)));
    vec3 ta = vec3(0.0, 1.0, 0.0);
    vec3 ww = normalize( ta - ro);
    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));
    vec3 vv = normalize(cross(ww,uu));
    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );

    vec4 res = raymarch( ro, rd );

    float sun = clamp( dot(sundir,rd), 0.0, 1.0 );
    vec3 col = vec3(0.6,0.71,0.75) - rd.y*0.2*vec3(1.0,0.5,1.0) + 0.15*0.5;
    col += 0.2*vec3(1.0,.6,0.1)*pow( sun, 8.0 );
    col *= 0.95;
    col = mix( col, res.xyz, res.w );
    col += 0.1*vec3(1.0,0.4,0.2)*pow( sun, 3.0 );
      
    gl_FragColor = vec4( col, 1.0 );
}
    </script>
    <script id="vertexShader" type="x-shader/x-vertex">
      attribute vec3 position;
      void main() {
        gl_Position = vec4(position, 1.0);
      }
    </script>
  </head>
  <body>
    <div id="header">
      <h1>
        <%= link_to("centerology", root_path) %>
        <% if content_for? :tagline %>
          &#126;
          <%= yield :tagline %>
        <% end %>
      </h1>
    </div>
    <div id="sidebar">
      <%= link_to "sign up", new_person_registration_path %>
    </div>
    <div id="content">
      <p class="notice"><%= notice %></p>
      <p class="alert"><%= alert %></p>
      <%= yield %>
    </div>
    <div id="footer">
      <p>
        &copy; <%=link_to("Land of the Rising Code", "http://risingcode.com")%>
      </p>
    </div>
    <div id="risingcode-grid"><canvas id="risingcode-canvas"></canvas></div>
  </body>
</html>
